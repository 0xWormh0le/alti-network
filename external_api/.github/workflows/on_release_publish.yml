name: Prepare a new release

"on":
  release:
    types:
      - published

  workflow_dispatch:
    inputs:
      tag:
        description: Release tag
        required: true

jobs:
  create_release_pull_request:
    name: Create Release Pull Request
    runs-on: ubuntu-latest
    env:
      GPG_PRIVATE_KEY: "${{ secrets.BOT_GPG_PRIVATE_KEY }}"

    # To add custom steps to this workflow, start step name with `Custom: `
    # To override existing step, set name to `Custom: <original_step_name>`
    steps:
      - name: Get Release
        uses: actions/github-script@v3
        id: release
        with:
          script: |
            let release = null;
            if (context.payload.inputs && context.payload.inputs.tag) {
              const tagName = context.payload.inputs.tag;
              // find Pull Request by number fom input
              const releasesResponse = await github.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              for (let releaseItem of releasesResponse.data) {
                if (releaseItem.tag_name !== tagName) continue;
                release = releaseItem;
                core.info(`Found release ${release.name}`);
                break;
              }
            }
            if (context.payload.release){
              // get Release from event payload
              release = context.payload.release;
            }

            if (!release) {
              throw new Error(`Cannot find Release`);
            }

            core.setOutput('target', release.target_commitish);
            core.setOutput('branch', `release/${release.tag_name}`);
            core.setOutput('id', release.id);
            core.setOutput("url", release.html_url);
            core.setOutput('tag', release.tag_name);
            core.setOutput('name', release.name);
            core.setOutput('body', release.body);
            return true;
      - name: Checkout Release target branch
        id: checkout
        uses: actions/checkout@v2
        with:
          ref: "${{ steps.release.outputs.target }}"
      - name: Update version
        id: version
        uses: vemel/nextversion@0.1.1
        with:
          path: external_api/version.txt
          type: pep440
          result: "${{ steps.release.outputs.tag }}"
          update: |
            external_api/version.txt
      - name: Add new release to CHANGELOG.md
        id: changelog
        uses: vemel/nextchange@0.1.0
        with:
          release: "${{ steps.version.outputs.result }}"
          clear: true
          set: "${{ steps.release.outputs.body }}"
      - name: Clear Unreleased in CHANGELOG.md
        id: clear-unreleased
        if: "steps.version.outputs.is-prerelease == 'false'"
        uses: vemel/nextchange@0.1.0
        with:
          release: Unreleased
          clear: true
      - name: Import GPG key
        id: import-gpg
        if: env.GPG_PRIVATE_KEY
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: "${{ env.GPG_PRIVATE_KEY }}"
          git-user-signingkey: true
          git-commit-gpgsign: true
      - name: Commit changes
        id: commit
        run: |
          VERSION=${{ toJSON(steps.version.outputs.result) }}
          BRANCH=${{ toJSON(steps.release.outputs.branch) }}
          git checkout -b $BRANCH
          git commit -am "Bump version to $VERSION"
          git push --set-upstream origin $BRANCH || true
      - name: Create Pull Request
        id: create-pull-request
        uses: actions/github-script@v3
        env:
          RELEASE_TAG: ðŸ”¥ [PROD]
          PRERELEASE_TAG: ðŸ‘· [STAGING]
        with:
          script: |
            const version = ${{ toJSON(steps.version.outputs.result) }}
            const isStable = ${{ steps.version.outputs.is-prerelease == 'false' }}
            const titleTag = isStable ? process.env.RELEASE_TAG : process.env.PRERELEASE_TAG;
            const title = `${titleTag} Release ${version}`
            const releaseBranch = ${{ toJSON(steps.release.outputs.branch) }};
            const targetBranch = ${{ toJSON(steps.release.outputs.target) }};
            const body = (
              `# Release ${version}\n\n` +
              `Merge this PR to update version number in \`${targetBranch}\` and release a new version.\n\n` +
              `âš  Do not delete \`${releaseBranch}\` branch after merging!\n\n` +
              "## Release notes\n\n" +
              ${{ toJSON(steps.changelog.outputs.result) }}
            )
            const response = await github.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: releaseBranch,
              base: targetBranch,
              title: title,
              body: body
            });

            const pullRequestNumber = response.data.number;
            core.info(`Release Pull Request labels: ${pullRequestNumber}`);

            const labels = ['release', ${{ toJSON(steps.changelog.outputs.label) }}];
            core.info(`Labels: ${labels}`);
            await github.issues.setLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pullRequestNumber,
              labels: labels
            });

            core.info(`Release Pull Request title: ${response.data.title}`);
            core.info(`Release Pull Request URL: ${response.data.html_url}`);
